(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{189:function(e,t,o){"use strict";o.r(t);var a=o(0),n=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"mobx-的生命周期-componentwillreact"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mobx-的生命周期-componentwillreact","aria-hidden":"true"}},[e._v("#")]),e._v(" MobX 的生命周期 componentWillReact")]),o("h3",{attrs:{id:"为什么会有这个生命周期？"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#为什么会有这个生命周期？","aria-hidden":"true"}},[e._v("#")]),e._v(" 为什么会有这个生命周期？")]),o("p",[e._v("redux改变值的方式是通过拷贝原来的对象生成新的对象，从而触发组件的componentWillReceiveProps，而MobX改变值只是在原始值的基础上改变，所以值的引用是没有改变的，这也就导致使MobX不会触发componentWillReceiveProps。")]),o("h3",{attrs:{id:"总结"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),o("p",[e._v("基于这种原因所以mobx-react提供了componentWillReact来触发MobX值的改变，但是它不只是监听MobX值的改变，同时包含componentReceiveProps的功能，所以在使用MobX之后，并不需要componentWillReceiveProps方法了。")])])}],!1,null,null,null);n.options.__file="1.md";t.default=n.exports}}]);